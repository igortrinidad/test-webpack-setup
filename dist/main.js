(()=>{var e={306:()=>{const e=document.createElement("template");e.innerHTML='\n<style> \n    :host { \n        margin-bottom: 10px; \n        display: block; \n    } \n    .invalid-field { \n        border: 1px solid red; \n    } \n    .invalid-field:focus { \n        outline-color: red; \n    } \n    .form-field { \n        display: table; \n    } \n    label, \n    input { \n        display: table-cell; \n    } \n    label { \n        padding-right: 10px; \n    } \n    .error { \n        display: block; \n    } \n    .hidden { \n        display: none; \n    } \n    ::slotted(span) { \n        color: grey; \n        font-style: italic; \n        padding-left: 10px; \n    } \n</style> \n\n<div class="form-field"> \n        <label></label> \n        <input /> \n        <slot></slot> \n        <span class="error hidden"></span> \n</div>';class t extends HTMLElement{constructor(){super(),this._shadowRoot=this.attachShadow({mode:"open"}),this._shadowRoot.appendChild(e.content.cloneNode(!0)),this.$label=this.shadowRoot.querySelector("label"),this.$input=this.shadowRoot.querySelector("input"),this.$error=this.shadowRoot.querySelector(".error")}static get observedAttributes(){return["value","label","type","error-message","invalid"]}connectedCallback(){this.$input.isConnected&&this.$input.addEventListener("blur",(e=>{!e.target.value&&this.hasAttribute("required")?(this.invalid=!0,this.$error.innerText="This field is required."):(this.invalid=!1,this.value=e.target.value)}))}attributeChangedCallback(e,t,n){switch(e){case"label":this.$label.innerText=`${n}:`;break;case"type":this.$input.type=n;break;case"error-message":this.$error.innerText=n;break;case"invalid":this._handleInvalidState(n)}}get invalid(){return this.hasAttribute("invalid")}set invalid(e){e?this.setAttribute("invalid",""):this.removeAttribute("invalid")}get value(){return this.getAttribute("value")}set value(e){this.setAttribute("value",e)}_handleInvalidState(e){null!==e?(this.$error.classList.remove("hidden"),this.$input.classList.add("invalid-field")):(this.$error.classList.add("hidden"),this.$input.classList.remove("invalid-field"))}}window.customElements.define("custom-input",t)}},t={};function n(i){var s=t[i];if(void 0!==s)return s.exports;var r=t[i]={exports:{}};return e[i](r,r.exports,n),r.exports}(()=>{"use strict";class e{static get(){return fetch("https://jsonplaceholder.typicode.com/posts").then((e=>e.json()))}}n(306),document.addEventListener("DOMContentLoaded",(()=>{(()=>{const t=document.querySelector("#posts-list");if(!t)throw new Error("Posts list not found");e.get().then((e=>{((e,t,n="li")=>{const i=document.createDocumentFragment();t.forEach((e=>{const t=document.createElement(n);t.textContent=e.title,i.appendChild(t)})),e.appendChild(i)})(t,e,"li")}))})()}))})()})();
//# sourceMappingURL=main.js.map